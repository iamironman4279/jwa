package com.example.demo;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.*;  import java.util.List; import java.util.Optional;  @RestController @RequestMapping("/api/users") public class UserController {      @Autowired     private UserRepository userRepository;      @Autowired     private JwtUtil jwtUtil;      // ✅ Register user     @PostMapping("/register")     public String register(@RequestBody User user) {         if (userRepository.findByUsername(user.getUsername()) != null) {             return "Username already exists.";         }         userRepository.save(user);         return "User registered successfully!";     }      // ✅ Login user     @PostMapping("/login")     public String login(@RequestBody User user) {         User existingUser = userRepository.findByUsername(user.getUsername());         if (existingUser != null && existingUser.getPassword().equals(user.getPassword())) {             String token = jwtUtil.generateToken(existingUser.getUsername());             return "JWT Token: " + token + "\nWelcome " + existingUser.getUsername();         } else {             return "Invalid username or password.";         }     }      // ✅ Create user (Admin operation)     @PostMapping     public User createUser(@RequestBody User user) {         return userRepository.save(user);     }      // ✅ Read all users     @GetMapping     public List<User> getAllUsers() {         return userRepository.findAll();     }      // ✅ Read user by ID     @GetMapping("/{id}")     public User getUserById(@PathVariable Long id) {         Optional<User> user = userRepository.findById(id);         return user.orElse(null);     }      // ✅ Update user     @PutMapping("/{id}")     public User updateUser(@PathVariable Long id, @RequestBody User updatedUser) {         return userRepository.findById(id)                 .map(user -> {                     user.setUsername(updatedUser.getUsername());                     user.setEmail(updatedUser.getEmail());                     user.setPassword(updatedUser.getPassword());                     return userRepository.save(user);                 })                 .orElse(null);     }      // ✅ Delete user     @DeleteMapping("/{id}")     public String deleteUser(@PathVariable Long id) {         if (userRepository.existsById(id)) {             userRepository.deleteById(id);             return "User deleted successfully.";         } else {             return "User not found.";         }     } }